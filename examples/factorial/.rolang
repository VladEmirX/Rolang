fact := fact_impl 1

fact_impl _ _ :=

fact_impl 'prod 0 ::= prod
fact_impl 'prod ('n > 0) ::= fact_impl (n * prod) (n - 1)

main () :=
    ## 6
    fact 3
      |> println "{}"

    ## compile error (fact_impl is undefined for arg0 < 0)
    fact (-1) .(println "{}")

    ## 24, 6, 2, 1,
    [4, 3, 2, 1] for n:
        res := n.fact
        print "{}, " res
    println ""

    ## [1, 1]
    print "{}\n" (0..2
        .iter
        .map fact
        .collect as (s32 .Array dyn .Box)
    )

    ## (2, 6)
    (1u32, 2u64)
        |> .map fact
        |> println

    mut x := 3

    ## 720
    println while: x < 720
    then:
        x .<-fact
    else:
        x

    # 720, 720, 6
    println "{}, {}, {}" x (x %<- 7) x

    u := fn ('a = Some 'n, 'b = Some, 'c = Some 'm, None, ?'e ) :
        n - m + (e or 0)

    ## 1
    (b := 1, 2, a := 3,)
        |> .map Some
        <+ None
        |> u
        |> "{}".println

    ## 0
    u (Some 1, Some(), Some (-1), None, -2) |> "{}".println
